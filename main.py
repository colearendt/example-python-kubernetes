# Autogenerated - DO NOT EDIT BY HAND
#
# DISCLAIMER: Strange file organization is used for code generation of the corresponding blog post.


# ------------------------------------------------------
# 1_api_client.py
# ------------------------------------------------------
import kubernetes


def k8s_api_client(endpoint: str, token: str, cafile: str) -> kubernetes.client.CoreV1Api:
    kconfig = kubernetes.config.kube_config.Configuration(
        host=endpoint,
        api_key={'authorization': 'Bearer ' + token}
    )
    kconfig.ssl_ca_cert = cafile
    kclient = kubernetes.client.ApiClient(configuration=kconfig)
    return kubernetes.client.CoreV1Api(api_client=kclient)


# ------------------------------------------------------
# 2_token.py
# ------------------------------------------------------
import eks_token

cluster_name = 'my-eks-cluster'
my_token = eks_token.get_token(cluster_name)


# ------------------------------------------------------
# 3_cafile.py
# ------------------------------------------------------
import boto3
import tempfile
import base64


def _write_cafile(data: str) -> tempfile.NamedTemporaryFile:
    # protect yourself from automatic deletion
    cafile = tempfile.NamedTemporaryFile(delete=False)
    cadata_b64 = data
    cadata = base64.b64decode(cadata_b64)
    cafile.write(cadata)
    cafile.flush()
    return cafile


bclient = boto3.client('eks')
cluster_data = bclient.describe_cluster(name=cluster_name)['cluster']
my_cafile = _write_cafile(cluster_data['certificateAuthority']['data'])


# ------------------------------------------------------
# 4_main.py
# ------------------------------------------------------
api_client = k8s_api_client(
    endpoint=cluster_data['endpoint'],
    token=my_token['status']['token'],
    cafile=my_cafile.name
)

api_client.list_namespace()


# ------------------------------------------------------
# 5_configmap.py
# ------------------------------------------------------
my_configmap = kubernetes.client.V1ConfigMap(
    api_version='v1',
    metadata={'name': 'my-configmap'},
    kind='ConfigMap',
    data={'my_file.txt': 'mycontent'}
)

api_client.create_namespaced_config_map(namespace='default', body=my_configmap)

# NOTE: to update a configmap, you need to
# use k8s_client.replace_namespaced_config_map
#
# If it already exists, create will give a 409 conflict


# ------------------------------------------------------
# 6_bonus.py
# ------------------------------------------------------
def create_update_configmap(
        k8s_client: kubernetes.client.CoreV1Api,
        namespace: str,
        configmap: kubernetes.client.V1ConfigMap
) -> kubernetes.client.V1ConfigMap:
    """
    Try to create a new namespaced configmap, and fall back to replacing
    a namespaced configmap if the create fails with a 409 (conflict)

    :rtype: client.V1ConfigMap
    :param k8s_client: The kubernetes.ApiClient object to use
    :param namespace: The namespace to update a configmap within
    :param configmap: The kubernetes.ConfigMap to apply
    :return: The kubernetes.ConfigMap API response
    """
    try:
        res = k8s_client.create_namespaced_config_map(namespace, configmap)
    except kubernetes.client.exceptions.ApiException as e:
        if e.status == 409:
            # 409 conflict = it exists... try to replace instead
            res = k8s_client.replace_namespaced_config_map(configmap.metadata['name'], namespace, configmap)
        else:
            raise e
    return res


create_update_configmap(api_client, namespace='default', configmap=my_configmap)

api_client.delete_namespaced_config_map(namespace='default', name='my-configmap')
